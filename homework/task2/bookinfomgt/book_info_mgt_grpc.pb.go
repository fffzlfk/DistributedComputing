// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bookinfomgt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookInfoMgtClient is the client API for BookInfoMgt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookInfoMgtClient interface {
	AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*AddBookResponse, error)
	QueryById(ctx context.Context, in *QueryByIdRequest, opts ...grpc.CallOption) (*Book, error)
	QueryByName(ctx context.Context, in *QueryByNameRequest, opts ...grpc.CallOption) (*BookList, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type bookInfoMgtClient struct {
	cc grpc.ClientConnInterface
}

func NewBookInfoMgtClient(cc grpc.ClientConnInterface) BookInfoMgtClient {
	return &bookInfoMgtClient{cc}
}

func (c *bookInfoMgtClient) AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*AddBookResponse, error) {
	out := new(AddBookResponse)
	err := c.cc.Invoke(ctx, "/bookinfomgt.BookInfoMgt/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookInfoMgtClient) QueryById(ctx context.Context, in *QueryByIdRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/bookinfomgt.BookInfoMgt/QueryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookInfoMgtClient) QueryByName(ctx context.Context, in *QueryByNameRequest, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, "/bookinfomgt.BookInfoMgt/QueryByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookInfoMgtClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/bookinfomgt.BookInfoMgt/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookInfoMgtServer is the server API for BookInfoMgt service.
// All implementations must embed UnimplementedBookInfoMgtServer
// for forward compatibility
type BookInfoMgtServer interface {
	AddBook(context.Context, *Book) (*AddBookResponse, error)
	QueryById(context.Context, *QueryByIdRequest) (*Book, error)
	QueryByName(context.Context, *QueryByNameRequest) (*BookList, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedBookInfoMgtServer()
}

// UnimplementedBookInfoMgtServer must be embedded to have forward compatible implementations.
type UnimplementedBookInfoMgtServer struct {
}

func (UnimplementedBookInfoMgtServer) AddBook(context.Context, *Book) (*AddBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookInfoMgtServer) QueryById(context.Context, *QueryByIdRequest) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryById not implemented")
}
func (UnimplementedBookInfoMgtServer) QueryByName(context.Context, *QueryByNameRequest) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByName not implemented")
}
func (UnimplementedBookInfoMgtServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBookInfoMgtServer) mustEmbedUnimplementedBookInfoMgtServer() {}

// UnsafeBookInfoMgtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookInfoMgtServer will
// result in compilation errors.
type UnsafeBookInfoMgtServer interface {
	mustEmbedUnimplementedBookInfoMgtServer()
}

func RegisterBookInfoMgtServer(s grpc.ServiceRegistrar, srv BookInfoMgtServer) {
	s.RegisterService(&BookInfoMgt_ServiceDesc, srv)
}

func _BookInfoMgt_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInfoMgtServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookinfomgt.BookInfoMgt/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInfoMgtServer).AddBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookInfoMgt_QueryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInfoMgtServer).QueryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookinfomgt.BookInfoMgt/QueryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInfoMgtServer).QueryById(ctx, req.(*QueryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookInfoMgt_QueryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInfoMgtServer).QueryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookinfomgt.BookInfoMgt/QueryByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInfoMgtServer).QueryByName(ctx, req.(*QueryByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookInfoMgt_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInfoMgtServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookinfomgt.BookInfoMgt/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInfoMgtServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookInfoMgt_ServiceDesc is the grpc.ServiceDesc for BookInfoMgt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookInfoMgt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookinfomgt.BookInfoMgt",
	HandlerType: (*BookInfoMgtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _BookInfoMgt_AddBook_Handler,
		},
		{
			MethodName: "QueryById",
			Handler:    _BookInfoMgt_QueryById_Handler,
		},
		{
			MethodName: "QueryByName",
			Handler:    _BookInfoMgt_QueryByName_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BookInfoMgt_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookinfomgt/book_info_mgt.proto",
}
